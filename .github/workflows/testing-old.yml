name: Automated Testing & Quality Assurance

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]
  schedule:
    # Run tests daily at 2 AM UTC
    - cron: '0 2 * * *'

jobs:
  code-quality:
    name: Code Quality & Security
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
        
    - name: Install dependencies
      run: npm ci
      
    - name: Run ESLint
      run: npm run lint
      
    - name: Run security audit
      run: npm audit --audit-level moderate
      
    - name: Check for outdated packages
      run: npm outdated || true
      
    - name: TypeScript check
      run: npx tsc --noEmit

  build-and-test:
    name: Build & Test APK
    runs-on: ubuntu-latest
    needs: code-quality
    
    strategy:
      matrix:
        profile: [preview, production]
        
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
        
    - name: Setup Expo and EAS
      uses: expo/expo-github-action@v8
      with:
        expo-version: latest
        eas-version: latest
        token: ${{ secrets.EXPO_TOKEN }}
        
    - name: Install dependencies
      run: npm ci
      
    - name: Build APK
      id: build
      run: |
        BUILD_ID=$(eas build --platform android --profile ${{ matrix.profile }} --non-interactive --json | jq -r '.id')
        echo "build_id=$BUILD_ID" >> $GITHUB_OUTPUT
        
    - name: Wait for build completion
      run: |
        echo "Waiting for build ${{ steps.build.outputs.build_id }} to complete..."
        eas build:view ${{ steps.build.outputs.build_id }} --json
        
    - name: Download APK
      if: success()
      run: |
        APK_URL=$(eas build:view ${{ steps.build.outputs.build_id }} --json | jq -r '.artifacts.buildUrl')
        curl -L "$APK_URL" -o carni-kridi-${{ matrix.profile }}.apk
        
    - name: Test APK installation
      if: success()
      run: |
        # Verify APK is valid
        file carni-kridi-${{ matrix.profile }}.apk
        
    - name: Upload APK for testing
      uses: actions/upload-artifact@v4
      if: success()
      with:
        name: apk-${{ matrix.profile }}-${{ github.sha }}
        path: carni-kridi-${{ matrix.profile }}.apk
        retention-days: 30

  crash-testing:
    name: Crash & Stability Testing
    runs-on: ubuntu-latest
    needs: build-and-test
    if: github.ref == 'refs/heads/main'
    
    steps:
    - name: Download APK
      uses: actions/download-artifact@v4
      with:
        name: apk-production-${{ github.sha }}
        
    - name: Setup Android testing environment
      run: |
        echo "Setting up crash testing environment..."
        # Here you would set up your crash testing tools
        
    - name: Run automated crash tests
      run: |
        echo "Running crash detection tests..."
        # This would run your automated testing suite
        # Example: Firebase Test Lab, AWS Device Farm, etc.
        
    - name: Generate test report
      run: |
        echo "Generating crash test report..."
        # Generate comprehensive test report
        
    - name: Upload test results
      uses: actions/upload-artifact@v4
      with:
        name: crash-test-results-${{ github.sha }}
        path: test-results/
        retention-days: 30

  notification:
    name: Notify Team
    runs-on: ubuntu-latest
    needs: [code-quality, build-and-test, crash-testing]
    if: always()
    
    steps:
    - name: Determine status
      id: status
      run: |
        if [[ "${{ needs.code-quality.result }}" == "success" && "${{ needs.build-and-test.result }}" == "success" && "${{ needs.crash-testing.result }}" == "success" ]]; then
          echo "status=success" >> $GITHUB_OUTPUT
          echo "message=✅ All tests passed! APK is ready for deployment." >> $GITHUB_OUTPUT
        else
          echo "status=failure" >> $GITHUB_OUTPUT
          echo "message=❌ Some tests failed. Please check the logs." >> $GITHUB_OUTPUT
        fi
        
    - name: Send Slack notification
      uses: 8398a7/action-slack@v3
      with:
        status: ${{ steps.status.outputs.status }}
        text: |
          🚀 **Carni Kridi App - Build Report**
          
          ${{ steps.status.outputs.message }}
          
          **Branch:** ${{ github.ref_name }}
          **Commit:** ${{ github.sha }}
          **Actor:** ${{ github.actor }}
          
          **Test Results:**
          - Code Quality: ${{ needs.code-quality.result }}
          - Build & Test: ${{ needs.build-and-test.result }}
          - Crash Testing: ${{ needs.crash-testing.result }}
      env:
        SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
