name: Build and Deploy

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

jobs:
  test:
    name: Run Tests
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20'
        cache: 'npm'
        
    - name: Install dependencies
      run: |
        npm ci
        cd backend && npm ci
        
    - name: Run linter
      run: npm run lint
      
    - name: Run frontend tests
      run: npm run test
      continue-on-error: true
      
    - name: Run backend tests
      run: |
        cd backend
        echo "Backend tests not implemented yet" && exit 0
      continue-on-error: true

  build-preview:
    name: Build Preview APK
    runs-on: ubuntu-latest
    needs: test
    if: github.ref == 'refs/heads/develop' || github.event_name == 'pull_request'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
        
    - name: Setup Expo and EAS
      uses: expo/expo-github-action@v8
      with:
        expo-version: latest
        eas-version: latest
        token: ${{ secrets.EXPO_TOKEN }}
        
    - name: Install dependencies
      run: npm ci
      
    - name: Auto-increment version
      run: |
        # Get current version from app.json
        CURRENT_VERSION=$(node -p "require('./app.json').expo.version")
        echo "Current version: $CURRENT_VERSION"
        
        # Split version into parts (e.g., 1.0.0 -> [1, 0, 0])
        IFS='.' read -ra VERSION_PARTS <<< "$CURRENT_VERSION"
        MAJOR=${VERSION_PARTS[0]}
        MINOR=${VERSION_PARTS[1]}
        PATCH=${VERSION_PARTS[2]}
        
        # Increment patch version
        NEW_PATCH=$((PATCH + 1))
        NEW_VERSION="$MAJOR.$MINOR.$NEW_PATCH"
        
        echo "New version: $NEW_VERSION"
        
        # Update app.json with new version
        node -e "
          const fs = require('fs');
          const appConfig = require('./app.json');
          appConfig.expo.version = '$NEW_VERSION';
          fs.writeFileSync('./app.json', JSON.stringify(appConfig, null, 2));
        "
        
    - name: Build Preview APK
      run: eas build --platform android --profile preview --non-interactive
      
    - name: Upload APK artifact
      uses: actions/upload-artifact@v4
      if: success()
      with:
        name: preview-apk-${{ github.sha }}
        path: "*.apk"
        retention-days: 30

  build-production:
    name: Build Production APK
    runs-on: ubuntu-latest
    needs: test
    if: github.ref == 'refs/heads/main'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
        
    - name: Setup Expo and EAS
      uses: expo/expo-github-action@v8
      with:
        expo-version: latest
        eas-version: latest
        token: ${{ secrets.EXPO_TOKEN }}
        
    - name: Install dependencies
      run: npm ci
      
    - name: Auto-increment version (Production)
      run: |
        # Get current version from app.json
        CURRENT_VERSION=$(node -p "require('./app.json').expo.version")
        echo "Current version: $CURRENT_VERSION"
        
        # Split version into parts
        IFS='.' read -ra VERSION_PARTS <<< "$CURRENT_VERSION"
        MAJOR=${VERSION_PARTS[0]}
        MINOR=${VERSION_PARTS[1]}
        PATCH=${VERSION_PARTS[2]}
        
        # Increment minor version for production
        NEW_MINOR=$((MINOR + 1))
        NEW_VERSION="$MAJOR.$NEW_MINOR.0"
        
        echo "New production version: $NEW_VERSION"
        
        # Update app.json
        node -e "
          const fs = require('fs');
          const appConfig = require('./app.json');
          appConfig.expo.version = '$NEW_VERSION';
          fs.writeFileSync('./app.json', JSON.stringify(appConfig, null, 2));
        "
        
        # Set as environment variable for next steps
        echo "NEW_VERSION=$NEW_VERSION" >> $GITHUB_ENV
        
    - name: Build Production APK
      run: eas build --platform android --profile production --non-interactive
      
    - name: Create Release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: v${{ env.NEW_VERSION }}
        release_name: Release v${{ env.NEW_VERSION }}
        body: |
          Automated release for Carni Kridi App
          
          Changes in this release:
          - Version bump to ${{ env.NEW_VERSION }}
          - Latest features and bug fixes
        draft: false
        prerelease: false

  crash-detection:
    name: Crash Detection & Monitoring
    runs-on: ubuntu-latest
    needs: [build-preview, build-production]
    if: always()
    
    steps:
    - name: Setup crash monitoring
      run: |
        echo "Setting up crash monitoring..."
        # This would integrate with your crash reporting service
        
    - name: Notify on build failure
      if: failure()
      uses: 8398a7/action-slack@v3
      with:
        status: failure
        text: "ðŸš¨ Build failed for Carni Kridi App! Please check the logs."
      env:
        SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
        
    - name: Notify on successful build
      if: success()
      uses: 8398a7/action-slack@v3
      with:
        status: success
        text: "âœ… Carni Kridi App build successful! New version deployed."
      env:
        SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
